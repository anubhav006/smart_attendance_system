#include <SPI.h>
#include <MFRC522.h>
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <WiFiClientSecureBearSSL.h>
//-----
#define RST_PIN D3
#define SS_PIN D4
#define BUZZER D2
//-
MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;
MFRC522::StatusCode status;
//-
int blockNum = 2;
/* Create another array to read data from Block */
/* Length of buffer should be 2 Bytes more than the size of Block (16 Bytes) */
byte bufferLen = 18;
byte readBlockData[18];
//------
String card_holder_name;
const String sheet_url =
"https://script.google.com/macros/s/AKfycbwL1bnc3vMinll5acDWC1OowTXwBiTNwd2hfHHAQCJQ687NEHtOEyXF0sWn3aoz4Qux4g/exec?name=";
//------
#define WIFI_SSID "Rahul"
#define WIFI_PASSWORD "asdfghjkl"
void setup()
{
/* Initialize serial communications with the PC */
Serial.begin(9600);
//Serial.setDebugOutput(true);
//-
//WiFi Connectivity
Serial.println();
Serial.print("Connecting to AP");
WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
while (WiFi.status() != WL_CONNECTED) {
  Serial.print(".");
  delay(200);
}
Serial.println("");
Serial.println("WiFi connected.");
Serial.println("IP address: ");
Serial.println(WiFi.localIP());
Serial.println();
//----------
/* Set BUZZER as OUTPUT */
pinMode(BUZZER, OUTPUT);
//-
/* Initialize SPI bus */
SPI.begin();
}
void loop()
{
//-
/* Initialize MFRC522 Module */
mfrc522.PCD_Init();
/* Look for new cards */
/* Reset the loop if no new card is present on RC522 Reader */
if (!mfrc522.PICC_IsNewCardPresent()) { return; }
/* Select one of the cards */
if (!mfrc522.PICC_ReadCardSerial()) { return; }
/* Read data from the same block */
//-
Serial.println();
Serial.println(F("Reading last data from RFID..."));
ReadDataFromBlock(blockNum, readBlockData);
/* If you want to print the full memory dump, uncomment the next line */
//mfrc522.PICC_DumpToSerial(&(mfrc522.uid));
/* Print the data read from block */
Serial.println();
Serial.print(F("Last data in RFID:"));
Serial.print(blockNum);
Serial.print(F("-->"));
for (int j = 0; j < 16; j++)
{
  Serial.write(readBlockData[j]);
}
Serial.println();
//--
digitalWrite(BUZZER, HIGH);
delay(200);
digitalWrite(BUZZER, LOW);
delay(200);
digitalWrite(BUZZER, HIGH);
delay(200);
digitalWrite(BUZZER, LOW);
if (WiFi.status() == WL_CONNECTED) {
  std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);
  client->setInsecure(); // Ignore SSL certificate validation
  card_holder_name = sheet_url + String((char*)readBlockData);
  card_holder_name.trim();
  Serial.println(card_holder_name);
  HTTPClient https;
  Serial.print(F("[HTTPS] begin...\n"));
  if (https.begin(*client, (String)card_holder_name)) {
    Serial.print(F("[HTTPS] GET...\n"));
    int httpCode = https.GET();
  }
  if (httpCode > 0) {
    Serial.printf("[HTTPS] GET... code: %d\n", httpCode);
  } else {
    Serial.printf("[HTTPS] GET... failed, error: %s\n", https.errorToString(httpCode).c_str());
  }
  https.end();
  delay(1000);
} else {
  Serial.printf("[HTTPS] Unable to connect\n");
}
void ReadDataFromBlock(int blockNum, byte readBlockData[])
{
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }
  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid));
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Authentication failed for Read: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }
  else {
    Serial.println("Authentication success");
  }
  status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen);
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Reading failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }
  else {
    Serial.println("Block was read successfully");
  }
}
